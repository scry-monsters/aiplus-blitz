generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  name           String?
  salt           String?   @default("")
  email          String    @unique(map: "User.email_unique")
  hashedPassword String?
  role           String    @default("USER")
  sessions       Session[]
  tokens         Token[]
}

model City {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Program   Program[]
  schools   School[]
  Student   Student[]
  Teacher   Teacher[]
}

model Faq {
  id            Int      @id @default(autoincrement())
  titleRu       String   @db.VarChar(255)
  titleKz       String   @db.VarChar(255)
  descriptionRu String
  descriptionKz String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Fact {
  id          Int      @id @default(autoincrement())
  titleRu     String   @db.VarChar(255)
  titleKz     String   @db.VarChar(255)
  orderNumber Int      @default(0)
  image       String   @default("https://firebasestorage.googleapis.com/v0/b/chat-angular-e97bc.appspot.com/o/aiplus%2Fthumbs%2Fplaceholder-2_500x500.webp?alt=media")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model School {
  id            Int       @id @default(autoincrement())
  cityId        Int
  titleEn       String    @db.VarChar(255)
  titleRu       String    @db.VarChar(255)
  titleKz       String    @db.VarChar(255)
  descriptionEn String
  descriptionRu String
  descriptionKz String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  city          City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  programs      Program[]
}

model Program {
  id                   Int              @id @default(autoincrement())
  titleRu              String           @db.VarChar(255)
  titleKz              String           @db.VarChar(255)
  shortSchoolNameRu    String?          @db.VarChar(255)
  shortSchoolNameKz    String?          @db.VarChar(255)
  fullSchoolNameRu     String?          @db.VarChar(255)
  fullSchoolNameKz     String?          @db.VarChar(255)
  subTitleRu           String?          @db.VarChar(255)
  subTitleKz           String?          @db.VarChar(255)
  titleAtRootRu        String?          @db.VarChar(255)
  titleAtRootKz        String?          @db.VarChar(255)
  titleAtRootHoverRu   String?          @db.VarChar(255)
  titleAtRootHoverKz   String?          @db.VarChar(255)
  logo                 String
  logoAtRoot           String?
  logoAtListOfPrograms String?
  orderNumber          Int              @default(0)
  youtubeVideoId       String?          @db.VarChar(255)
  videoTitleRu         String?          @db.VarChar(255)
  videoTitleKz         String?          @db.VarChar(255)
  factAboutProgramKz   String?
  factAboutProgramRu   String?
  titleWhyRu           String           @db.VarChar(255)
  titleWhyKz           String           @db.VarChar(255)
  textWhyKz            String?
  textWhyRu            String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now()) @updatedAt
  schoolId             Int?
  cityId               Int
  city                 City             @relation(fields: [cityId], references: [id], onDelete: Cascade)
  School               School?          @relation(fields: [schoolId], references: [id])
  ProgramBenefits      ProgramBenefit[]
  ProgramSubject       ProgramSubject[]
  ProgramWhy           ProgramWhy[]
  Student              Student[]
}

model Student {
  id               Int      @id @default(autoincrement())
  fioKz            String   @db.VarChar(255)
  fioRu            String   @db.VarChar(255)
  image            String?
  beforeBallCount  String   @db.VarChar(255)
  afterBallCount   String   @db.VarChar(255)
  orderNum         Int      @default(0)
  listOrderNum     Int      @default(0)
  descriptionKz    String
  descriptionRu    String
  textKz           String
  textRu           String
  feedbackKz       String
  feedbackRu       String
  youtubeVideoId   String
  sliderSubtitleKz String   @db.VarChar(255)
  sliderSubtitleRu String   @db.VarChar(255)
  year             DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  programId        Int
  cityId           Int
  city             City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  program          Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model Subject {
  id             Int              @id @default(autoincrement())
  titleRu        String           @db.VarChar(255)
  titleKz        String           @db.VarChar(255)
  descriptionRu  String?
  descriptionKz  String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  ProgramSubject ProgramSubject[]
  teachers       Teacher[]
}

model ProgramBenefit {
  id          Int      @id @default(autoincrement())
  titleKz     String?  @db.VarChar(255)
  titleRu     String?  @db.VarChar(255)
  orderNumber Int?     @default(0)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  programId   Int
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ProgramWhy {
  id          Int      @id @default(autoincrement())
  textKz      String
  textRu      String
  orderNumber Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  programId   Int
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
}

model ProgramSubject {
  id          Int      @id @default(autoincrement())
  orderNumber Int      @default(0)
  programId   Int
  subjectId   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  program     Program  @relation(fields: [programId], references: [id], onDelete: Cascade)
  subject     Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([programId, subjectId], name: "ProgramSubject_programId_subjectId_key")
}

model Teacher {
  id             Int      @id @default(autoincrement())
  fioKz          String
  fioRu          String
  sloganKz       String
  sloganRu       String
  image          String
  image2         String
  youtubeVideoId String
  orderNum       Int
  urlName        String
  textKz         String
  textRu         String
  subtitleKz     String
  subtitleRu     String
  cityId         Int
  subjectId      Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  city           City     @relation(fields: [cityId], references: [id], onDelete: Cascade)
  subject        Subject? @relation(fields: [subjectId], references: [id])
}

model Feature {
  id            Int      @id @default(autoincrement())
  titleKz       String   @db.VarChar(255)
  titleRu       String   @db.VarChar(255)
  descriptionKz String
  descriptionRu String
  orderNum      Int?     @default(0)
  image         String?  @default("https://firebasestorage.googleapis.com/v0/b/chat-angular-e97bc.appspot.com/o/aiplus%2Fthumbs%2Fplaceholder-2_500x500.webp?alt=media")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  expiresAt          DateTime?
  handle             String    @unique(map: "Session.handle_unique")
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?
  userId             Int?
  user               User?     @relation(fields: [userId], references: [id])
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([hashedToken, type], name: "Token_hashedToken_type_key")
}

model MenuItem {
  id          Int        @id @default(autoincrement())
  titleRu     String
  titleKz     String
  link        String
  orderNumber Int
  parentId    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  parent      MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children    MenuItem[] @relation("MenuItemToMenuItem")
}

model Blog {
  id                Int                 @id @default(autoincrement())
  titleRu           String
  titleKz           String
  textRu            String
  textKz            String
  image             String
  descriptionKz     String
  descriptionRu     String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  BlogAndTagForBlog BlogAndTagForBlog[]
}

model TagForBlog {
  id                Int                 @id @default(autoincrement())
  orderNum          Int?                @default(0)
  titleRu           String
  titleKz           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  BlogAndTagForBlog BlogAndTagForBlog[]
}

model BlogAndTagForBlog {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  blogId       Int?
  tagForBlogId Int?
  blog         Blog?       @relation(fields: [blogId], references: [id])
  tag          TagForBlog? @relation(fields: [tagForBlogId], references: [id])
}

enum TokenType {
  RESET_PASSWORD
}
